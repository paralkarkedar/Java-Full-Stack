Inter-Thread Communication
==========================
Two threads can communicate with one another by using wait(),notify() and notifyAll() method.

The Thread which is expecting updations it has to wait() method and the thread which is performing updations it has to call notify() method.

wait(),notify() and notifyAll() method present in Object class but not in Thread class.

To call wait(),notify() and notifyAll() method our current thread must be in a synchronized area otherwise we will get IllegalMonitorStateException.

Once a thread calls wait() method on a given object ,1st it will release the lock of that  object immediately and entered into waiting state. 

 Once a thread calls notify() and notifyAll() method on a given object.It will release the lock of that object but not immediately.

Except wait(),notify() and notifyAll() method ,there is no such concept where lock release can happen.

ex:
class MyThread extends Thread
{
	int total=0;
	public void run()
	{
		
		synchronized(this)
		{
				System.out.println("Child Thread started calculation");
				for(int i=1;i<=10;i++)
				{
					total=total+i;
				}
				System.out.println("Child thread giving notification");
				this.notify();
		}
	}
}
class Test
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t=new MyThread();
		t.start();
		synchronized(t)
		{
			System.out.println("Main Thread waiting for updating");
			t.wait();
			System.out.println("Main -Thread got notification ");
			System.out.println(t.total);
		}
	}
}


DeadLock in java
===============
DeadLock will occur in a suitation when one thread is waiting to access 
object lock which is acquired by another thread and that thread is waiting
to access object lock which is acquired by first thread.

Here both the threads are waiting release the thread but no body will 
release such situation is called DeadLock.

ex:

class Test
{
	public static void main(String[] args)
	{
		final String res1="hi";
		final String res2="bye";

		Thread t1=new Thread()
		{
			public void run()
			{
				synchronized(res1)
				{
					System.out.println("Thread1: Locking Resource 1");
					synchronized(res2)
					{
						System.out.println("Thread1: Locking Resource2");
					}
				}
			}
		};

		Thread t2=new Thread()
		{
			public void run()
			{
				synchronized(res2)
				{
					System.out.println("Thread2: Locking Resource 2");
					synchronized(res1)
					{
						System.out.println("Thread1: Locking Resource 1");
					}
				}
			}
		};

		t1.start();
		t2.start();
	}
}

Drawbacks of multithreading
======================
1)DeadLock
2)Thread Starvation



Java 8 Features
================

Functional interface
=====================
Interface which contains only one abstract method is called functional interface.

It can have any number of default methods and static methods.

It is also known as SAM interface or Single Abstract Method interface.

The main objective of functional interface is to achieve functional programming.
ex:
	a = f1(){}

	f1(f2(){})
	{}

@FunctionalInterface annotation is used to declare a functional interface and it is optional.
ex:
--
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

Lamda Expression
================
Lamda expression introduced in Java 8.

Lamda expression is used to concise the code.

We can use lamda expression when we have functional interface.

Lamda expression consider as method not a class.

The main objective of lamda expression is to achieve functional programming.

Lamda expression does not allow name, returntype and modifier.

ex:
	Java method
	-----------
		public void m1()
		{
			System.out.println("Hello");
		}

	Lamda expression
	---------------
		()->
		{
			System.out.println("Hello");
		};

ex:
--
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class Test 
{
	public static void main(String[] args)
	{
		A a=()->
			{
				System.out.println("Here M1 Method");
			};
			a.m1();		
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract void m1(int i,int j);
}
class Test 
{
	public static void main(String[] args)
	{
		A a=(int i,int j)->
			{
				System.out.println(i+j);
			};
			a.m1(10,20);		
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract int m1(int i,int j);
}
class Test 
{
	public static void main(String[] args)
	{
		A a=(int i,int j)->
			{
				return i+j;
			};
			System.out.println(a.m1(20,30));		
	}
}

Default methods in interface
============================
Java provides facility to declare default methods in interface.

If we declare any method in interface and tagged with default keyword is called default method.

Default method is a non-abstract method.

Default method can be override.

ex
---
@FunctionalInterface 
interface A 
{
	//abstract method 
	public abstract void m1();
	
	//default method
	default void m2()
	{
		System.out.println("M2-Method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
		a.m2();
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	//abstract method 
	public abstract void m1();
	
	//default method
	default void m2()
	{
		System.out.println("M2-Method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	
	public void m2()
	{
		System.out.println("Override -M2 Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new B();
		a.m1();
		a.m2();
	}
}

Using default methods of an interface we can achieve multiple inheritance.

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		System.out.println("Middle-M1 Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();//Middle-M1 Method
	}
}

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1 Method");
	}
}
interface Left
{
	default void m1()
	{
		System.out.println("Left-M1 Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		Right.super.m1();
		Left.super.m1();
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();//Middle-M1 Method
	}
}

Static methods in interface
===========================
Java provides facility to declare static methods in interface.

If we declare any method in interface and tagged with static keyword is called static method.

Static method is non-abstract method.

Static method can't be override.

ex:
---
interface A
{
	static void m1()
	{
		System.out.println("M1 Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A.m1();
	}
}


Stream API
============
A Stream is an interface which is present in java.util.stream package.

Stream API is used to perfor builk operations on Collecitons.

Stream API is used to process objects in Collections.

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		List<Integer> newList=list.stream().filter(i->i%2==0).collect(Collectors.toList());
	
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		List<Integer> newList=list.stream().map(i->i+10).collect(Collectors.toList());
	
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		long times=list.stream().filter(i->i%2==0).count();
	
		System.out.println(times);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		int min=list.stream().min((i1,i2)-> i1.compareTo(i2)).get();
	
		System.out.println(min);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		int max=list.stream().max((i1,i2)-> i1.compareTo(i2)).get();
	
		System.out.println(max);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		List<Integer> newList=list.stream().sorted().collect(Collectors.toList());
	
		System.out.println(newList);
	}
}

ex;
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(8,2,1,3,7,6,4);
		
		List<Integer> newList=list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
	
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(1,2,1,2,7,7,4);
		
		List<Integer> newList=list.stream().distinct().collect(Collectors.toList());
	
		System.out.println(newList);
	}
}

forEach() method
=================
A forEach() method introduced in Java 8.

It is used to iterate the elements/objects from Collections.

ex:

import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,2,5,6,1);
		
		list.forEach(element -> System.out.print(element+" "));
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Map<Integer,String> map=new LinkedHashMap<Integer,String>();
		map.put(1,"one");
		map.put(2,"two");
		map.put(3,"three");
		
		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}

Method reference (::)
-----------------------
Method reference introduced in Java 8.

Method reference is a special type of lamda expression.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(7,2,5,6,1);
		
		list.forEach(System.out::println);
	}
}


Interview Question 
====================

Q) Write a java program to display employee information in ascending order of employee id?


import java.util.*;
import java.util.stream.*;

class Employee 
{
	private int empId;
	private String empName;
	private double empSal;
	
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(104,"Jack",4000d));
		list.add(new Employee(101,"Morries",1000d));
		list.add(new Employee(102,"Jennie",2000d));
		list.add(new Employee(103,"Kelvin",3000d));
		
		List<Employee> newList=list.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());
		
		newList.forEach(employee -> System.out.println(employee.getEmpId()+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}



Q) Write a java program to display employee information in ascending order of employee name?

import java.util.*;
import java.util.stream.*;

class Employee 
{
	private int empId;
	private String empName;
	private double empSal;
	
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		list.add(new Employee(104,"Jack",4000d));
		list.add(new Employee(101,"Morries",1000d));
		list.add(new Employee(102,"Jennie",2000d));
		list.add(new Employee(103,"Kelvin",3000d));
		
		List<Employee> newList=list.stream().sorted(Comparator.comparing(Employee::getEmpName)).collect(Collectors.toList());
		
		newList.forEach(employee -> System.out.println(employee.getEmpId()+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}
















































