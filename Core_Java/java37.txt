throw statement
================
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide by zero");

Diagram: java37.1

throws statement
================
If any checked exceptions raised in our program we must and should handle those exceptions by using try and catch block or by using throws statement.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(4000);
			System.out.println("Welcome to Java");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)throws  InterruptedException
	{
			Thread.sleep(4000);
			System.out.println("Welcome to Java");
	}
}


2) Userdefined exceptions
===========================
Exceptions which are created by the user based on the application requirements are called userdefined exceptions or custom exceptions.

ex:
	NoInterestInJavaException 
	NotPraticingException
	NeedTimePassException 
	EligibleException
	NotEligibleException 
	and etc.

ex:
---
import java.util.Scanner;

class EligibleException extends RuntimeException 
{
	EligibleException(String s)
	{
		super(s);
	}
}
class NotEligibleException extends RuntimeException
{
	NotEligibleException(String s)
	{
		super(s);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
		
		if(age<18)
			throw new NotEligibleException("U r not eligible to vote");
		else
			throw new EligibleException("U r eligible to vote");
	}	
}


Class.forName()
===============
It is used to load a class but it won't create an object.

ex:
---

class Test 
{
	//static block
	static
	{
		System.out.println("static-block");
	}
	//instance block
	{
		System.out.println("instance-block");
	}
	public static void main(String[] args)throws  ClassNotFoundException
	{
		Class.forName("Test");
	}	
}


Q) Types of Errors?

We have three types of errors.

1) Compile time error 

2) Logical error 

3) Runtime error 


java.io package
================

File
=======
	File f=new File("abc.txt");

File will check is there any abc.txt file already created or not.
If it is available it simply refers to that file.If it is not created then
it won't create any new file.

ex:
---
import java.io.*;
class Test 
{
	public static void main(String[] args) 
	{
		File f=new File("abc.txt");
		System.out.println(f.exists());//false
	}
}


A File object can be used to create a physical file.

ex:
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("abc.txt");
		System.out.println(f.exists());//false

		f.createNewFile();
		System.out.println(f.exists());//true

	}
}

A File object can be used to create a directory also.

ex:
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f=new File("bhaskar123");
		System.out.println(f.exists());//false

		f.mkdir();
		System.out.println(f.exists());//true 

	}
}


Q)Write a java program to Create a  "cricket123" folder and inside that folder create "abc.txt" file?

import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException 
	{
		File f1=new File("cricket123");
		f1.mkdir();

		File f2=new File("cricket123","abc.txt");
		f2.createNewFile();

		System.out.println("Please check the location");

	}
}



FileWriter
==========
FileWriter is used to write character oriented data into a file.

constructor
--------------
FileWriter fw=new FileWriter(String s);
FileWriter fw=new FileWriter(File f);

ex:
	FileWriter fw=new FileWriter("aaa.txt");
	or

	File f=new File("aaa.txt");
	FileWriter fw=new FileWriter(f);

If file does not exist then FileWriter will create a physical file.


Methods
-----------

1)write(int ch)
-----------------
	It will insert single character into a file.

2)write(char[] ch)
-----------------
	It will insert array of characters into a file.

3)write(String s)
-------------------
	It will insert String into a file.

4)flush()
----------
	It gives guaranttee that last character of a file is also inserted.

5)close()
-----------
	It is used to close the FileWriter object.


ex:
-----
import java.io.*;
class Test 
{
	public static void main(String[] args)throws IOException
	{
		FileWriter fw=new FileWriter("aaa.txt");

		fw.write(98);// b 
		fw.write("\n");

		char[] ch={'a','b','c'};
		fw.write(ch);
		fw.write("\n");

		fw.write("bhaskar\nsolution");
		fw.flush();
		fw.close();
		System.out.println("Please check the location");
	}
}


ex:
-----
import java.io.*;
class Test 
{
	public static void main(String[] args)	{
		FileWriter fw=null;
		try
		{
			fw=new FileWriter("aaa.txt");
			fw.write(98);// b 
			fw.write("\n");

			char[] ch={'a','b','c'};
			fw.write(ch);
			fw.write("\n");

			fw.write("bhaskar\nsolution");
			fw.flush();
			fw.close();
			System.out.println("Please check the location");
		}
		catch(IOException e)
		{
			e.printStackTrace();	
		}
	}
}

Try with Resources
=================
A try with resources introduced in Java 7.

In Java, the try-with-resources statement is a try statement that declares one or more resources. 

The resource is as an object that must be closed after finishing the program.

ex:
-----
import java.io.*;
class Test 
{
	public static void main(String[] args)	{
		
		try(FileWriter fw=new FileWriter("aaa.txt");)
		{
			
			fw.write(98);// b 
			fw.write("\n");

			char[] ch={'a','b','c'};
			fw.write(ch);
			fw.write("\n");

			fw.write("bhaskar\nsolution");
			fw.flush();
			fw.close();
			System.out.println("Please check the location");
		}
		catch(IOException e)
		{
			e.printStackTrace();	
		}
	}
}










































