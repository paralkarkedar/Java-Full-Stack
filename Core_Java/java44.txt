Multithreading
===============

Q) What is the difference between Thread and Process?

Thread
------
	A thread is a light weight sub process.
	We can run multiple threads concurrently.
	One thread can communicate with another thread.
	ex:
		class is one thread 
		block is one thread 
		constructor is one thread

Process
-------
	A process is a collection of threads.
	We can run multiple process concurrently.
	One process can't communicate with another process.
	ex:
		downloading a file from internet is one process
		taking a class using zoommeeting is one process
		typing the notes in editor is one process 

Multitasking
============
Executing several task simultenously such concept is called multitasking.

Multitasking is divided into two types.

1) Thread based multitasking 
----------------------------
	Executing several task simultenously where each task is a same part of a program.
	It is best suitable for programmatic level.

2) Process based multitasking 
------------------------------
	Executing several task simultenously where each task is a independent process.
	It is best suitable for OS level.



Multithreading
==============
Executing several threads simultenously such concept is called multithreading.

In multithreading only 10% of work should be done by a programmer and 90% of work will be done by a JAVA API.

The main important application area of multithreading area.

1) To implements multi media graphics.

2) To develop video games. 

3) To develop animations. 

Ways to create a thread in Java
================================
There are two ways to create a thread in java.

1) By extending Thread class 

2) By implementing Runnable interface 


1) By extending Thread class 
-----------------------------

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//start a thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case1: Thread Schedular
--------------------------
If multiple threads are waiting for execution which thread has to execute will decide by thread schedular.

What algorithm , behaviour or mechanism used by thread schedular is depends upon JVM vendor.

Hence we can't expect any order or exact output in multithreading.



case2: Difference between t.start() and t.run() 
------------------------------------------------
If we invoke t.start() method , a new thread will be created which is responsible to execute run() method automaticaly.

ex:
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//new thread 
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

If we invoke t.run() method, no new thread will be created but run() method will execute just like a normal method.

ex:

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//no new thread 
		t.run();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case3: If we won't override run() method
---------------------------------------
If we won't override run() method , A t.start() method executes Thread class run() method automatically.

But Thread class run() method is empty implementation.Hence we won't get any output from child thread.

ex:
---
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//new thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
} 

case4: If we overload run() method
-----------------------------------
If we overload run() method , A t.start() method always execute run() method with zero-parameters only.

ex:
--
class MyThread extends Thread 
{
	public void run()
	{
		System.out.println("0-arg run");
	}
	public void run(int i)
	{
		System.out.println("int-arg run");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		//instantiate a thread 
		MyThread t=new MyThread();
		
		//new thread
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

case5: Thread life cycle
-------------------------

Diagram: java44.1

Once if we create a thread , our thread will be in new or born state.

If we call t.start() method our thread goes to ready/runnable state.

If thread schedular allocates to CPU then out thread enters to running state.

Once the run() method execution is completed our thread goes to dead state. 


2) By implementing Runnable interface 
---------------------------------------
class MyRunnable implements Runnable 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("child-thread");
		}
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MyRunnable r=new MyRunnable();
		
		Thread t=new Thread(r); // r is a targatable interface
		
		t.start();
		
		for(int i=1;i<=5;i++)
		{
			System.out.println("parent-thread");
		}
	}
}

Setting and Getting name of a thread
=================================
In java, every thread has a name explicitly provided by the programmer or automatically generated by JVM.

We have following methods to set and get name of a threads.
ex:
	public final void setName(String name);
	public final String getName();

ex
---
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getName());// main 
		
		MyThread t=new MyThread();
		System.out.println(t.getName());//Thread-0
		
		Thread.currentThread().setName("Parent-Thread");
		System.out.println(Thread.currentThread().getName());// Parent-Thread
		
		t.setName("Child-Thread");
		System.out.println(t.getName());//Child-Thread
	}
}

Thread priority
===============
In java, every thread has a priority explicitly provided by the programmer or automatically generated by JVM.

The valid range of thread priority is 1 to 10. Where 1 is a least priority and 10 is a highest priority.

If we take more then 10 priority then we will get IllegalArgumentException.

A Thread class defines following standard constants as thread priority.
ex:
	Thread.MAX_PRIORITY - 10 
	Thread.NORM_PRIORITY - 5 
	Thread.MIN_PRIORITY  - 1 

We don't have such constants like LOW_PRIORITY and HIGH_PRIORITY.

A thread which is having highest priority will be executed first.

A thread schedular uses thread priority while allocating to CPU.

If multiple threads having same priority then we can't expect any execution order.

We have following methods to set and get thread priority.

ex:
	public final void setPriority(int priority)
	public final int getPriority()


ex:
---
class MyThread extends Thread 
{
	
}
class Test 
{
	public static void main(String[] args)
	{
		System.out.println(Thread.currentThread().getPriority());//5
		
		MyThread t=new MyThread();
		System.out.println(t.getPriority());//5
		
		Thread.currentThread().setPriority(9);
		System.out.println(Thread.currentThread().getPriority());//9
		
		System.out.println(t.getPriority());//5
		
		t.setPriority(4);
		System.out.println(t.getPriority());//4
		
		t.setPriority(11); // R.E IllegalArgumentException
		
	}
}












































































