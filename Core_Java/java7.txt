Internal Architecture of JVM
============================
Diagram: java7.1

Java application contains java code instructions.Once if we compile java code instructions convert to byte code instructions in .class file.

JVM will invoke one module called classloader or sub system to load all the byte code instructions from .class file.The work of classloader is to check these byte code instructions are proper or not.
If they are not proper then it will refuse the execution.If they are proper then it will allocates the memory.

We have five types of memories in java.

1) Method Area 
----------------
Method area contains code of a class, code of a variable and code of a method.


2) Heap 
--------
Our object creations will store in heap area.

3) Java Stack
-------------
Java methods execute in method area.
But to execute those methods we required some memory and that memory will be allocated in java stack.

4) PC Register 
-------------
IT is a program counter register which is used to track the address of an instructions.

5) Native method stack
------------------------
Java methods execute in method area.

Similarly native methods execute in native method stack.

But to execute native methods we required a program called Native Method Interface.


Execution Engine
----------------
Execution Engine contains interpreter and JIT compiler.

Whenever JVM loads byte code instructions from .class file. It simultenously uses interpreter and JIT compiler.

Interpreter is used to execute our program line by line procedure.

JTI compiler is used to increase the execution speed of our program.

Later, JVM converts byte code to machine code.

Interview Questions
====================

Q) What is native method in java?

A method which is developed by using some other language is called native method.



Q) Can we execute native method in java directly?

	No, we required Native method interface.




Q) What is JIT compiler?

It is a part of a JVM which is used to increase the execution speed of our program.




Q) How many memories are there in java?

We have five memories in java.
	
1) Method Area 

2) Heap area 

3) Java Stack 

4) PC Register 

5) Native Method Stack 




Q) How many classloaders are there in java?

We have three classloaders in java.

1) Bootstrap classloader 

2) Extension classloader 

3) Application/System classloader 




Identifiers
============
A name in java is called identifier.

It can be variable name, method name, class name or label name.

ex:
	class Test
	{
		public static void main(String[] args)
		{
			int x = 10;

			System.out.println(x); 
		}
	}
	Here Test,main,args an x are identifiers.


Rules to declare an identifiers
--------------------------------
Rule1:
-----
	Identifier will accept following characters.
	ex:
		A-Z
		a-z
		0-9
		_
		$
Rule2:
------
	If we take other characters then we will get compile time error.
	ex:
		int  emp$alary;	//valid 
		int  emp@salary; //invalid 
		class  Test*App //invalid 
		{
		} 

Rule3:
------
	Identifier must and should starts with alphabet, underscore or dollar symbol but 
	not with digit.
	ex:
		int   a1234; //valid 
		int   _abcd; //valid 
		int   $=20;  //valid 
		int   1abcd; //invalid 

Rule4:
------
	We can't take reserved words as an identifier name.
	ex:
		int  if;  //invalid 
		int else; //invalid 
		int  for; //invalid 
		int  do; //invalid 

Rule5:
-----
	Every identifier is a case sensitive.
	ex:
		int number;
		int NUMBER;
		int NuMbEr; 

Rule6:
-----
	There is no length limit for an identifier but it is not recommande to take more then 
	15 characters.




































