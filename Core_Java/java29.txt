Method overriding
==================
Having same method name with same parameters/signatures in two different classes is called
method overriding.

Methods which are present in parent class are called overridden methods.

Methods which are present in child class are called overriding methods.

ex:
---
class Parent 
{
	public void property()
	{
		System.out.println("Cash+Gold+Land+House");
	}
	//overridden method 
	public void marry()
	{
		System.out.println("Rashmika");
	}
}
class Child extends Parent 
{
	//overriding method 
	public void marry()
	{
		System.out.println("Trisha");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		Parent p=new Parent();
		p.property(); // cash+gold+land+house 
		p.marry(); // Rashmika

		Child c=new Child();
		c.property(); // cash+gold+land+house 
		c.marry(); // Trisha 

		Parent p1=new Child();
		p1.property(); // cash+gold+land+house
		p1.marry(); // Trisha
	}
}

If we declare any method as final then overriding of that method is not possible.

ex:
---
class Parent 
{
	public final void property()
	{
		System.out.println("House-Not For Sale");
	}
}
class Child extends Parent 
{
	public final void property()
	{
		System.out.println("House- For Sale");
	}
}
class Test
{
	public static void main(String[] args) 
	{
		Parent p=new Parent();
		p.property();// House-Not For Sale 

		Child c=new Child();
		c.property(); // C.T.E 
	}
}

If parent don't want to give any property to child then we need to declare our property as private.

ex:

class Parent 
{
	protected void company()
	{
		System.out.println("Organization");
	}
	private void property()
	{
		System.out.println("House");
	}
}
class Child extends Parent 
{
	private void property()
	{
		System.out.println("House-Ownerss");
	}
}
class Test
{
	public static void main(String[] args) 
	{
		Parent p=new Parent();
		p.company();// Organization
		p.property(); // C.T.E 

		Child c=new Child();
		c.company(); // Organization-CEOs
	}
}

Method Hiding
=============
Method hiding is exactly same as method overriding with following differences.

Method Overriding				Method hiding
-------------------				--------------
No method is static.				All methods are static.

Method resolution will taken care by a 		Method resolution will taken care by a 
JVM based on runtime object.			compiler based on reference type.

It is also known as runtime polymorphism,	It is also known as compile time 
dynamic polymorphism or late binding.		polymorphism, static polymorphism or 
						early binding.

ex:
class Parent 
{
	public static void property()
	{
		System.out.println("Cash+Gold+Land+House");
	}
	//overridden method 
	public static void marry()
	{
		System.out.println("Rashmika");
	}
}
class Child extends Parent 
{
	//overriding method 
	public static void marry()
	{
		System.out.println("Trisha");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		Parent p=new Parent();
		p.property(); // cash+gold+land+house 
		p.marry(); // Rashmika

		Child c=new Child();
		c.property(); // cash+gold+land+house 
		c.marry(); // Trisha 

		Parent p1=new Child();
		p1.property(); // cash+gold+land+house
		p1.marry(); // Rashmika
	}
}

Interview Questions
===================

Q) Can we overload main method in java?

Yes , we can overload main method in java.
But JVM always execute main method with String[] parameter only.

ex:


class Test  
{
	public static void main(int[] iargs) 
	{
		System.out.println("int array");
	}
	public static void main(String[] args) 
	{
		System.out.println("string array");
	}
}


Q) Can we override main method in java?

No, we can't override main method in java because it is static.


Polymorphism
==============
Polymorhism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in a different forms is called polymorphism.

The main objective of polymorphism is to provide flexibility.

Diagram: java29.1

In java, polymorphism is divided into two types.

1) Compile time polymorphism  / Static polymorphism / Early binding

2) Runtime polymorphism  / Dynamic polymorphims / Late binding 

1) Compile time polymorphism
----------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.

ex:
	Method overloading 
	Method hiding 

2) Runtime polymorphism
-----------------------
A polymorphism which exhibits at runtime is called run time polymorphism.

ex:
	Method overriding 


Diagram: java29.2

constructors
=============
A constructor is a special method which is used to initialized an object.

Having same name as class name is called constructor.

It is executed when we create an object.

It does not contain any returntype.

It contains following modifiers.

ex:
	default 
	public
	private 
	protected 

In java, we have two types of constructors.

1) Userdefined constructor

2) Default constructor 

1) Userdefined constructor
---------------------------
If a constructor is created by the user based on the application requirements is called 
userdefined constructor.

It is classified into two types.

i) Zero-Argument constructor 

ii) Parameterized constructor 

i) Zero-Argument constructor
--------------------------
Suppose if we are not passing any argument to userdefined constructor then that constructor 
is called 0-argument constructor.

ex:
---
class Test  
{
	Test()
	{
		System.out.println("Constructor");
	}
	public static void main(String[] args) 
	{
		System.out.println("Main-Method");
	}
}

o/p:
	Main-Method


ex:
----
class Test  
{
	private Test()
	{
		System.out.println("Constructor");
	}
	public static void main(String[] args) 
	{
		System.out.println("Main-Method");
		Test t=new Test();
	}
}
o/p:
	Main-Method
	constructor 

ex:3
-----
class Test  
{
	protected Test()
	{
		System.out.println("Constructor");
	}
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("Main-Method");
		Test t2=new Test();
	}
}
o/p:
	constructor
	Main-Method
	constructor 

ii) Parameterized constructor 
-------------------------------
Suppose if we are passing atleast one argument to userdefined constructor then that constructor
is called parameterized constructor.

ex:
---
class Employee
{
	//current class variables
	private int empId;
	private String empName;
	private double empSal;

	//parameterized constructor 
	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}

	//get the details
	public void getEmployeeDetails()
	{
		System.out.println("Employee Id : "+empId);
		System.out.println("Employee Name : "+empName);
		System.out.println("Employee Salary : "+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan Morries",1000d);
		e.getEmployeeDetails();
	}
}


2) Default constructor
----------------------
It is a compiler generated constructor for every java program where we are not defining 
atleast zero argument constructor.

To see the default constructor we need to use below command.

ex:
	javap  -c   Test 

Diagram: java29.3



Constructor overloading
========================
Having same constructor name with different paremeters/signatures in a single class 
is called constructor overloading.

ex:
---
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}

Interview Question
-------------------

Q) What is tightly encapsulated class?

A class is said to be tightly encapsulated if and only if all variables of that 
class declared as private. Here we don't need to check these variables contains setter
and getter methods or not.

ex:
	class A 
	{
		int i=10; 
	}
	// It is not a tightly encapsulated class 

ex:
	class A 
	{
		int i=10;
		private int j=20;	
	}	 
	// It is not a tightly encapsulated class 

ex:
	class A 
	{
		private int i=10;
		private int j=20;
	}
	// It is tightly encapsulated class

ex:
	class A 
	{
		int i=10;
	}
	class B extends A 
	{
		private int j=20;
	}
	// if no parent is tightly encapsulated then no child is tightly encapsulted.
	
































































