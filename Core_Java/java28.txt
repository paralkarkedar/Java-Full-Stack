Inheritance
===========
Inheritance is a mechanism where one class will inherit the properties of another class.

Inheritance is a mechanism where we will derive a class in the presence of existing class.

The main objective of inheritance is to provide reusability.

Using "extends" keyword we can implements inheritance.

Diagram: java28.1

We have following types of inheritance.

1) Single Level Inheritance 

2) Multi Level Inheritance 

3) Multiple Inheritance 

4) Hierarchical Inheritance 

5) Hybrid Inheritance 


1) Single Level Inheritance 
----------------------------
If we derived a class by usin one base class is called single level inheritance.

Diagram:
		A (parent/base/super class)
		|
		|
		B (child/derived/sub class)

ex:
---
class A 
{
	int i=10;
}
class B extends A 
{
	int j=20;
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A();
		System.out.println(a.i); //10
		
		B b=new B();
		System.out.println(b.i); //10
		System.out.println(b.j); //20
	}
}

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
	}
}


2) Multi Level Inheritance 
----------------------------
If we derived a class by using one base class and that class is derived from another base class is called multi level inheritance.

Diagram:
		A
		|
		|
		B
		|
		|
		C 

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends B 
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m2();
		c.m3();
	}
}

3) Multiple Inheritance 
---------------------
In java, we can't extends more then one class simultenously because java does not support multiple inheritance.

ex:
	class A 
	{
	}
	class B 
	{
	}
	class C extends A,B  --> invalid 
	{	
	}

But interface can extends more then one interface.Hence we can achieve multiple inheritance concept through interfaces.		
ex:
	interface A 
	{
	}
	interface B
	{	
	}
	interface C extends A,B --> valid 
	{
	}

If our class does not extends any other class then it is a direct child class of Object class.

ex:					diag:

	class A 				Object
	{					|
						|
	}					A 
	

If our class extends some other class then it is a indirect child class of Object class.
		
ex:				diag:
	class A 				Object
	{					|
	}					|
	class B extends A 			A 
	{					|
	}					|
						B 

Java does not support cyclic inheritance.
ex:
	class A extends B 
	{	
	}
	class B extends A 
	{
	}
	
Q) Why java does not support multiple inheritance?

There may chance of raising ambiguity problem that's why java does not support multiple inheritance.

ex:
	P1.m1()				   P2.m1()
	|-------------------------------------|
			  |
			c.m1();







4) Hierarchical Inheritance 
----------------------------
If we derived multiple classes by using one base class is called hierarchical inheritance.

Diag:		
			A 
			|
	|-------------------------------|
	B				C

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends A 
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m3();
		
	}
}

5) Hybrid inheritance
---------------------
It is a combination of more then one inheritances.

Java does not support hybrid inheritance.


Diag:		
			A 
			|
	|-------------------------------|
	B				C
	|-------------------------------|
			|
			D 


Has-A relationship 
==================
Has-A relationship is also known as composition and aggregation.

There is no specific keyword to implements Has-A relationship but mostly we will use new operator.

The main objective of Has-A relationship is to provide reusability.

Has-A relationship will increase dependency between two components.

ex:
	class Trainer
	{
		- 
		- // trainer related functionality 
		- 
	}
	class Course 
	{
		Trainer t=new Trainer();
		-
		-
	}
	
ex:
---
class Ihub
{
	public String courseName()
	{
		return "FSD-JAVA";
	}
	public String trainerName()
	{
		return "Niyaz Sir";
	}
	public double courseFee()
	{
		return 30000d;
	}
}
class Usha
{
	public void getCourseDetails()
	{
		Ihub i=new Ihub();
		System.out.println("Course Name : "+i.courseName());
		System.out.println("Trainer Name : "+i.trainerName());
		System.out.println("Course Fee : "+i.courseFee());
	}
}
class Student 
{
	public static void main(String[] args)
	{
		Usha u=new Usha();
		u.getCourseDetails();
	}
}

composition
============
Without existing container object there is no chance of having contained object then the relationship between container and contained object is called composition which is strongly association.

Diagram: java28.2


Aggregation 
===========
Without existing container object there is a chance of having contained object then the relationship between container and contained object is called aggregation which is loosely association.

Diagram: java28.3


Method overloading
==================
Having same method name with different parameters/signatures in a single class is called method overloading.

Method overloading will reduce complexity of the programming.

All the methods present in a class are called overloaded methods.

ex:
---

class MeeSeva
{
	//overloaded methods 
	public void search(int voterId)
	{
		System.out.println("Details Found via voterId");
	}
	public void search(String houseNo)
	{
		System.out.println("Details Found via houseNo");
	}
	public void search(long aadharNo)
	{
		System.out.println("Details Found via aadharNo");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		MeeSeva ms=new MeeSeva();
		ms.search(101);
		ms.search("6-4/93/A/1");
		ms.search(12345L);
	}
}





































 




























