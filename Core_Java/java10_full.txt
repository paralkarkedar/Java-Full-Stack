

Q)Is Java purely object oriented or not?

No, java will not consider as purely object oriented programming language because it does not 
support many OOPS concepts like multiple inheritance, operator overloading and more over we depends
upon primitive datatypes which are non-objects.




Types of variables in java
==========================
A name which is given to a memory location is called variable.

Purpose of variable is used to store the data.

In java, we have two types of variables.

1) Primitive variables 
------------------
	It is used to represent primitive values.

2) Reference variables 
----------------------
	It is used to represent object reference.
	ex:
		Student s=new Student();
		        |
		reference variable 
	
Based on the position and execution these variables are divided into three types.

1) Instance variables / Non-static variables 

2) Static variables / Global variables 

3) Local variables / Temperory variables / Automatic variables 


1) Instance variables 
----------------------
A value of a variable which is varied(changes) from object to object is called instance variable.

Instance variable will be created at the time of object creation and it will destroy at the time of 
object destruction.Hence scope of instance variable is same as scope of an object.

Instance variable will store in heap area as a part of an object.

Instance variable must and should declare immediately after the class but not inside methods, blocks and constructors.

Instance variable we access directly from instance area but we can't access directly from static area.

To access instance variable from static area we need to create object reference.

ex:
---
class Test 
{
	//instance variable
	int i=10;
	
	public static void main(String[] args) 
	{
		System.out.println(i);	// C.T.E 
	}
}

ex:
---
class Test
{
	//instance variable 
	int i=10;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.i); //10
	}
}

Note:
----
If we won't initialize any value to instance variable then JVM will initialized default values.

ex:3
----
class Test
{
	//instance variable 
	boolean b;

	public static void main(String[] args)
	{
		Test t=new Test();
		System.out.println(t.b); //false
	}
}

ex:4
----
class Test
{
	//instance variable 
	int i=10;

	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test();

		System.out.println(t1.i);//10
		System.out.println(t2.i);//10

		t1.i=100;
		
		System.out.println(t1.i);//100
		System.out.println(t2.i);//10
	}
}

ex:5
----
class Test
{
	public static void main(String[] args)
	{
		Test t=new Test();
		t.m1();	
	}
	//non-static method 
	public void m1()
	{
		System.out.println("instance-method");
	}
}

2) Static variables
===================
A value of a variable which is not varied(change) from object to object is called static variable.

Static variable will be created at the time of classloading and it will destroy at the time of class unloading.Hence scope of static variable is same as scope of .class file.

Static variables will store in method area.

Static variable must and should declare immediately after the class using static keyword but not 
inside methods, blocks and constructors.

Static variable we can access directly from instance area as well as from static area.

Static variable we can access by using object reference and class name.

ex:
---
class Test
{
	//static variable 
	static int i=10;

	public static void main(String[] args)	
	{
		System.out.println(i); // 10

		Test t=new Test();
		System.out.println(t.i); // 10


		System.out.println(Test.i);//10	
	}
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialized default values.

ex:2
----
class Test
{
	//static variable 
	static String s;

	public static void main(String[] args)	
	{
		System.out.println(s); // null 

		Test t=new Test();
		System.out.println(t.s); // null

		System.out.println(Test.s); // null		
	}
}

ex:3
---
class Test
{
	//static variable 
	static int i=10;

	public static void main(String[] args)	
	{
		Test t1=new Test();
		Test t2=new Test();

		System.out.println(t1.i);//10
		System.out.println(t2.i);//10

		t1.i=100;	

		System.out.println(t1.i);//100
		System.out.println(t2.i);//100
	}
}

ex:4
----

class Test
{
	public static void main(String[] args)	
	{
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();

	}
	//static method 
	public static void m1()
	{
		System.out.println("static-method");	
	}
}


3) Local variables
==================
To meet temperory requirements a programmer will declare some variables inside methods, blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution block and it will destroy when execution block is executed.Hence scope of local variable is same as scope of execution block where it is declared.

Local variables will store in java stack.


ex:1
---
class Test
{
	public static void main(String[] args)	
	{
		//local variable 
		int i=10;
		System.out.println(i);//10
	}	
}

Note:
----
If we won't initialize any value to local variable then JVM will not initialized default values.


ex:2
---
class Test
{
	public static void main(String[] args)	
	{
		//local variable 
		int i;
		System.out.println(i);
	}	
}

o/p:

C.T.E : variable i might not have been initialized


A local variable will accept only one modifier i.e final.

ex:3
----
class Test
{
	public static void main(String[] args)	
	{
		//local variable 
		final int i=10;

		System.out.println(i);//10
	}	
}


Interview Question
==================

Q) What is Literal ?

A value which is assigned to a variable is called literal.

A value which is not change during the program execution is called literal.

ex:
	
	int   i   =  10;
	 |    |	     |____ value of a variable / Literal 
	 |    |___________ variable name / identifier 
	 |________________ datatype / keyword 






















































































