Main method 
============
Our program contains main method or not.

Either it is properly declare or not. It is not a responsibility of a compiler to check.

It is a liability of a JVM to check for main method.

If JVM won't find main method then it will throw one runtime error called main method not found.

JVM always look for main method with following signature.

signature
--------
	public 	static	void main(String[] args)

If we perform any changes in above signature then JVM will throw one runtime error called main method not found.


Q) Explain main method in java?

public
------
	JVM wants to call main method from anywhere.
static
-------
	JVM wants to call main method without using object reference.
void
-----
	Main method does not return anything to JVM.

main
-----
	It is an identifier given to main method.

String[] args
------------
	It is a command line arguments


We can perform following changes in main method.

1) Order of modifiers is not important incase of public static we can declare static public also.
   ex:
	static public void main(String[] args)

2) We can declare String[] in following acceptable formats.
   ex:
	public static void main(String[] args)	
	public static void main(String  []args)	
	public static void main(String args[])	
	
3) We can replace args with any java valid identifier.
   ex:
	public static void main(String[] ihub)		

4) We can change String[] with var-arg parameter.
   ex:
	public static void main(String... args)	

5) Main method will accept following modifiers.
   ex:
	synchronized 
	strictfp
	final 



Command line arguments
=====================
Arguments which are passing through command prompt such type of arguments are called command line arguments.

In command line arguments we need to pass our input values at runtime.

ex:
	javac   Test.java

	java    Test  101  raja  M  1000.0
			|    |   |   |______ args[3]
			|    |   |__________ args[2]
			|    |______________ args[1]
			|___________________ args[0]

ex:
---
class Test
{
	public static void main(String[] args)	
	{
		System.out.println(args[0]);
		System.out.println(args[1]);
		System.out.println(args[2]);
		System.out.println(args[3]);
	}
}

System.out.println()
====================
It is a output statement in java.

Whenever we want to display any userdefined statements or data then we need to use output stmt.

syntax:
------
	static variable 
		|
	System.out.println();
	|     		|  
predefined		predefined method 
final class


Diagram: java11

ex:
---
class Test
{
	public static void main(String[] args)	
	{
		System.out.println("stmt1");
		System.out.print("stmt2");
		System.out.printf("stmt3");
	}
}

Various ways to display the data in java
----------------------------------------
1) 
	System.out.println("Hello World");



2)
	int i=10;
	System.out.println(i);

3)
	int i=10,j=20;
	System.out.println(i+" "+j);


4) 	
	int i=1,j=2,k=3;
	System.out.println(i+" "+j+" "+k);


Fully Qualified Name
=====================
Fully qualified name means we will declare a class or interface along with package name.

Fully qualified name is used to improve readability of our code.

ex:
---
class Test
{
	public static void main(String[] args)	
	{
		java.util.Date d=new java.util.Date();
		System.out.println(d);
	}
}





















