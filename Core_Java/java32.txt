Enum
====
Enum is a group of named constants.

Enum concept introduced in 1.5v.

Using enum we can create our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

We can declare enum as follow.

syntax:
-------
	enum   type_name
	{	
		value1,value2,...,valueN
	}

ex:
---
	enum Months
	{
		JAN,FEB,MAR
	}


Internal implementation of enum
-------------------------------
Every enum internally consider as class concept and it extends with java.lang.Enum class.

Every enum  constant is a reference variable of enum type.

ex:


enum Months			final class Months extends java.lang.Enum 
{				{
	JAN,FEB,MAR	==>		public static final Months JAN=new Months();
}					public static final Months FEB=new Months();
					public static final Months MAR=new Months();
				}


Declaration and usage of enum
------------------------------
enum Months
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m=Months.JAN;
		System.out.println(m);
	}
}


ex:
---
enum Months
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months m=Months.FEB;
		switch(m)
		{
			case JAN: System.out.println("It is January"); break;
			case FEB: System.out.println("It is Febrary"); break;
			case MAR: System.out.println("It is March"); break;
		}
	}
}


java.lang.Enum
---------------
The power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1) values() 
---------
	It returns group of constants from enum.

2) ordinal() 
-----------
	It returns ordinal number.

ex:
---
enum Months
{
	JAN,FEB,MAR
}
class Test 
{
	public static void main(String[] args)
	{
		Months[] m=Months.values();

		for(Months m1:m)
		{
			System.out.println(m1+"----------"+m1.ordinal());
		}
	}
}

When compare to old language enum , java enum is more powerful because in addition to constants
we can declare constructors, variables and methods.

ex:
---
enum Drinks
{
	PEPSI,COKE,CAMPA;

	Drinks()
	{
		System.out.println("constructor");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Drinks d=Drinks.PEPSI;
	}
}


ex:
---
enum Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN;

	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i); 
	}
}


Wrapper classes
===============
The main objective of wrapper classes are.

1) To wrap primitive to wrapper object and vice versa.

2) To defined several utility methods. 

ex:
	Primitive type		wrapper class
	--------------		--------------
	byte			Byte	
	short			Short
	int			Integer
	long			Long
	float			Float
	double 			Double 
	boolean			Boolean
	char 			Character 

constructor
-----------
There are two ways to create objects for wrapper classes.One will take corresponding primitive as 
an argument and another will take corresponding String as an argument.

ex:
	wrapper class		constructor
	-----------		------------
	Byte			byte or String
	Short			short or String 
	Integer			int or String
	Long			long or String
	Float			float or String
	Double 			double or String
	Boolean			boolean or String 
	Character 		char 

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1); // 10

		Integer i2=new Integer("20");
		System.out.println(i2); // 20
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1); //true
		
		Boolean b2=new Boolean("false");
		System.out.println(b2); //false

	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c=new Character('a');
		System.out.println(c); // a 

	}
}

Utility methods
================

1) xxxValue() method
--------------------
It is used to convert wrapper object to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		byte b=i.byteValue();

		System.out.println(b);
	}
}

2) valueOf() method
---------------
It is used to convert primitive type to wrapper object.

ex:

class Test 
{
	public static void main(String[] args)
	{
		byte b=10;
		
		Integer i=Integer.valueOf(b);
		System.out.println(i);//10

		Long l=Long.valueOf(b);
		System.out.println(l);//10

		Float f=Float.valueOf(b);
		System.out.println(f);//10.0
	}
}

3) parseXxx() method
--------------------
It is used to convert string type to primitive type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		String str="10";

		int i=Integer.parseInt(str);
		System.out.println(i);//10

		long l=Long.parseLong(str);
		System.out.println(l);//10

		float f=Float.parseFloat(str);
		System.out.println(f);//10.0

	}
}


4) toString() method
--------------------
It is used to convert wrapper object to string type.

ex:
---

class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		String s=i.toString();

		System.out.println(s);

	}
}


Interview program
-----------------

Q) Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:
---
import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first binary number :");
		String binary1=sc.next();//1010

		System.out.println("Enter the second binary number :");
		String binary2=sc.next();//0101

		//convert binary to decimal 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);
		
		int c=a+b;

		//convert decial to binary 
		String result=Integer.toBinaryString(c);
		System.out.println(result);
	}
}

Inner classes
=============
Sometimes we will declare a class inside another class such concept is called inner class.

ex:
	class Outer_class
	{
		class  Inner_class
		{
			-
			- //code to be execute 
			-
		}
	}

Inner classes introduced as a part of even handling to remove GUI bugs.

But due to powerful features and benefits of inner classes , programmers started to use inner
class in regular programming.

Inner class does not support static declaration.


Accessing inner class data from static area of outer class
-----------------------------------------------------------
class Outer 
{
	class Inner
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}

	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();
		i.m1();
	}

}

Whenever we compile above program we will get two .class files i.e Outer.class and Outer$Inner.class.


ex:
--
class Outer 
{
	class Inner
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}

	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}

}

Accessing inner class data from non-static area of outer class
-----------------------------------------------------------
ex:
--
class Outer 
{
	class Inner
	{
		public  void m1()
		{
			System.out.println("M1-Method");
		}
	}

	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}

	public static void main(String[] args)
	{
		Outer o=new Outer();
		o.m2();
	}
}


























