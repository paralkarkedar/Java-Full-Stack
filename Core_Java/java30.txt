this keyword
============
A this keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables

2) To refer current class methods 

3) To refer current class constructors 


1) To refer current class variables
------------------------------------
class A 
{
	int i=10;
	int j=20;

	A(int i,int j)
	{
		System.out.println(i+" "+j); // 100  200

		System.out.println(this.i+" "+this.j);//10 20
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a = new A(100,200);
	}
}


2) To refer current class methods 
----------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	    this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
		
	}
}

3) To refer current class constructors 
---------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
================
A super keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors 

1) To refer super class variables 
---------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;
	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); // 100 200
		System.out.println(super.i+" "+super.j); //10  20
		System.out.println(i+" "+j);//1000 2000
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods 
------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}

3) To refer super class constructors 
--------------------------------------
class A 
{
	A()
	{
		System.out.println("A-const");
	}
}
class B extends A 
{
	B()
	{
		//super();
		System.out.println("B-const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
	}
}

Has-A relationship program
==========================
class Employee
{
	private int empId;
	private String empName;
	private Address address;

	//parameterized constructor
	public Employee(int empId,String empName,Address address)
	{
		this.empId=empId;
		this.empName=empName;
		this.address=address;
	}

	//getter methods
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public Address getAddress()
	{
		return address;
	}

	public String toString()
	{
		return "\nEmployee Id : "+getEmpId()+"\nEmployee Name: "+getEmpName()+"\nEmployee Address: "+getAddress();
	}
}

class Address
{
	private String houseNo;
	private String locality;
	private String city;

	//parameterized construr
	public Address(String houseNo,String locality,String city)
	{
		this.houseNo=houseNo;
		this.locality=locality;
		this.city=city;
	}

	//getter methods
	public String getHouseNo()
	{
		return houseNo;
	}
	public String getLocality()
	{
		return locality;
	}
	public String getCity()
	{
		return city;
	}

	public String toString()
	{
		return "\nHouse No: "+getHouseNo()+"\nLocality: "+getLocality()+"\nCity: "+getCity();
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Address address=new Address("1-4-64/1","Ameerpet","Hyderabad");

		Employee e=new Employee(201,"Alan Morries",address);

		System.out.println(e);
	}
}

Interface
==========
Interface is a collection of zero or more abstract methods.

Abstract methods are incomplete methods because they ends with semicolon and does not
have any body.

ex:
	void m1();

It is not possible to create object for interfaces.

To write the implementation for abstract methods of an interface we will use implementation 
class.

By default every abstract method is a public and abstract.

Interface contains only constants.

We can declare interface as follow.

syntax:
-------
	interface  <interface_name>
	{
		-
		- //abstract methods 
		- // constants 
		-
	}

If we know service requirement specification when we need to use interface.

Diagram: java30.1





ex:
----
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:2
----
interface A 
{
	public abstract void m1();
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}



If interface contains four methods then we need to override all methods otherwiser we will
get compile time error.

ex:
----
interface A 
{
	public void show();
	abstract void display();
	public abstract void view();
	void see();
}
class B implements A 
{
	@Override
	public void show()
	{
		System.out.println("show-method");
	}

	@Override
	public void display()
	{
		System.out.println("display-method");
	}

	@Override
	public void view()
	{
		System.out.println("view-method");
	}

	@Override
	public void see()
	{
		System.out.println("see-method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.show();
		a.display();
		a.view();
		a.see();
	}
}

Interface can extends more then one interface.

ex:
---
interface A 
{
	void m1();
}
interface B
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:
---
interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}
 
Note:
-----
According to Java 8 version, Interface is a collection of abstract methods, default 
methods and static methods.































