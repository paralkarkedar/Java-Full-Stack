Q) Write a java program to display distinct elements from given array?

Input:
	1 2 2 3 3 3 4 4 4 4 

Output:
	1 2 3 4 


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={1,2,2,3,3,3,4,4,4,4};
		
		Set<Integer> set=new LinkedHashSet<Integer>();
		
		for(int i:arr)
		{
			set.add(i);
		}
		
		for(int i:set)
		{
			System.out.print(i+" ");
		}
	}
}

TreeSet
=========
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it takes sorting order of hash code.

Hetrogeneous objects are not allowed.

If we try to insert hetrogeneous object then we will get ClassCastException.

Null insertion is not possible.

If we try to insert null then we will get NullPointerException.

ex
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(5);
		ts.add(1);
		ts.add(3);
		System.out.println(ts); //[1, 3, 5, 10]
		
		ts.add(5);
		System.out.println(ts); //[1, 3, 5, 10]
		
		//ts.add("hi");
		//System.out.println(ts); //R.E ClassCastException
	
		ts.add(null);
		System.out.println(ts); // R.E NullPointerException
	}
}

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(5);
		ts.add(1);
		ts.add(3);
		System.out.println(ts); //[1, 3, 5, 10]
		
		ts.add(5);
		System.out.println(ts); //[1, 3, 5, 10]
		
		//ts.add("hi");
		//System.out.println(ts); //R.E ClassCastException
	
		//ts.add(null);
		//System.out.println(ts); // R.E NullPointerException
	}
}

Q) What is the difference between Comparable and Comparator interface?

Comparable
----------
Comparable is an interface which is present in java.lang package.

Comparable interface contains only one method i.e compareTo() method.

If we depend upon default natural sorting order then we need to use Comparable interface.

Ex:
		obj1.compareTo(obj2)

		It returns -ve if obj1 comes before obj2
		It returns +ve if obj1 comes after obj2
		It returns 0 if both objects are same 
ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z")); // -25
		
		System.out.println("Z".compareTo("A")); // 25
		
		System.out.println("K".compareTo("K")); // 0
	}
}

Comparator
------------
Comparator interface present in java.util package.

Comparator interface contains following two methods i.e compare() and equals() method.

If we depend upon customized sorting order then we need to use Comparator interface.

ex:
	public int compare(Object obj1,Object obj2)

	It returns +ve if obj1 comes before obj2
	It returns -ve if obj1 comes after obj2
	It returns 0 if both objects are same 

Implementation of equals() method is optional because it is present in Object class which is available
by default in our class through inheritance.

Implementation of compare() method is mandatory.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts); //[10, 5, 3, 1]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else
			return 0;
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts); //[1, 3, 5, 10]
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else
			return 0;
		
	}
}


Map
====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in a key and value pair then we need to use 
Map interface.

Key can't be duplicate but value can be duplicate.

Both key and value must be objects.

Each key and value pair is called one entry.

Diagram: java41.1

HashMap
========
The underlying data structure is Hashtable.

Duplicate keys are not allowed but values can be duplicate.

Insertion order is not preserved because it taks hash code of a key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for both key and value.

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put(1,10);
		hm.put(5,50);
		hm.put(10,100);
		hm.put(7,70);
		System.out.println(hm);//{1=10, 5=50, 7=70, 10=100}
		
		hm.put(5,500);
		System.out.println(hm);//{1=10, 5=500, 7=70, 10=100}
		
		hm.put("one","raja");
		System.out.println(hm);//{1=10, 5=500, 7=70, one=raja, 10=100}
		
		hm.put(null,null);
		System.out.println(hm);//{null=null, 1=10, 5=500, 7=70, one=raja, 10=100}
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put(1,10);
		hm.put(5,50);
		hm.put(10,100);
		hm.put(7,70);
		
		Set s=hm.keySet();
		System.out.println(s);//[1, 5, 7, 10]
		
		Collection c=hm.values();
		System.out.println(c); //[10, 50, 70, 100]
		
		Set s1=hm.entrySet();
		System.out.println(s1);//[1=10, 5=50, 7=70, 10=100]
	}
}


LinkedHashMap
=============
LinkedHashMap is exactly same as HashMap class with following differences.

HashMap						LinkedHashMap 
------------					--------------
The underlying data structure is Hashtable.	The underlying data structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is prserved.

It is introduced in 1.2v.			It is introduced in 1.4v.

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap lhm=new LinkedHashMap();
		lhm.put("ten","gogo");
		lhm.put("one","alan");
		lhm.put("six","raja");
		lhm.put("four","morries");
		System.out.println(lhm);//{ten=gogo, one=alan, six=raja, four=morries}
		
		lhm.put("one","jojo");
		System.out.println(lhm);//{ten=gogo, one=jojo, six=raja, four=morries}
		
		lhm.put(10,100);
		System.out.println(lhm);//{ten=gogo, one=jojo, six=raja, four=morries, 10=100}
		
		lhm.put(null,null);
		System.out.println(lhm);//{ten=gogo, one=jojo, six=raja, four=morries, 10=100, null=null}
	}
}

Interview Program
------------------

Q) Write a java program to compare two dates?

import java.time.LocalDate;
class Test  
{
	public static void main(String[] args) 
	{
		LocalDate date1=LocalDate.now();		
		LocalDate date2=LocalDate.of(2024,9,15);
		
		if(date1.compareTo(date2)>0)
			System.out.println("Date1 is greatest");
		else if(date1.compareTo(date2)<0)
			System.out.println("Date2 is greatest");
		else
			System.out.println("Both are same");
		
		
	}
}



















































































		

































