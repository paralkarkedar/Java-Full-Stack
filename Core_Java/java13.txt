Typecasting
==============
The process of converting from one datatype to another datatype is called typecasting.

In java, typecasting can performed in two ways.

1) Implicit typecasting 

2) Explicit typecasting 


1) Implicit typecasting 
------------------------
If we want store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as widening or upcasting.

we can perform implicit typecasting as follow.

ex:
	byte	--->	short
				--->
					int ---> long  ---> float ---> double
				--->
			char


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b=10;
		
		int i=b;
		
		System.out.println(i); // 10
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		char ch='a';
		
		float f=ch;
		
		System.out.println(f); // 97.0
	}
}


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		double d=i;
		
		System.out.println(d); // 10.0
	}
}

2) Explicit typecasting 
------------------------
If we want to store bigger value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte	<---	short
				<---
					int <--- long  <--- float <--- double
				<---
			char
	
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		float f=10.5f;
		
		int i=(int)f;
		
		System.out.println(i); // 10
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=65;
		
		char ch=(char)i;
		
		System.out.println(ch); // A
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i=130;
		
		byte b=(byte)i;
		
		System.out.println(b);
	}
}

Types of blocks 
================
A block is a set of statements which is enclosed in a curly braces i.e {}.

In java, we have three types of blocks.

1) Instance block 

2) Static block 

3) Local block 


1) Instance block 
------------------
Instance block is used to initialize the instance variables.

Instance block must and should declare immediately after the class.

Instance block will execute when create an object.

We can declare instance block as follow.

syntax:
	//instance block
	{
		-
		- //set of statements 
		-	
	}

ex:
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	main-method

ex:
---
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method
	instance-block

ex:
---
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	instance-block
	main-method
	instance-block 

ex:
---
class Test  
{
	//instance variable
	int i;
	
	//instance block
	{
		i=100;
	}
	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println(t.i);//100
	}
}

2) Static block 
--------------
Static block is used to initialize the static variables.

Static block must and should declare immediately after the class using static keyword.

Static block will at the time of classloading.

We can declare static block as follow.

syntax:
		//static block
		static
		{
			-
			- //code to be execute 	
			-
		}

ex:
----
class Test  
{
	//static block
	static
	{
		System.out.println("static-block");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");
	}
}
o/p:
	static-block
	main-method 

ex:
----
class Test  
{
	//instance block
	{
		System.out.println("instance-block");
	}
	
	//static block
	static
	{
		System.out.println("static-block");
	}
	
	public static void main(String[] args) 
	{
		Test t=new Test();
		System.out.println("main-method");
	}
}
o/p:
	static-block
	instance-block
	main-method 

ex:
----
class Test  
{
	//static variables 
	static int i;
	
	//static block
	static
	{
		i=200;
	}
	
	public static void main(String[] args) 
	{
		System.out.println(i); //200
	}
}



3) Local block
--------------
Local block is used to initialize the local variables.

Local block must and should declare inside methods.

Local block will execute just like normal statement.

We can declare local block as follow.

syntax:
------
	//local block
	{
		-
		- //set of statements 
		-
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println("stmt1");
		
		//local block
		{
			System.out.println("stmt2");
		}
		
		System.out.println("stmt3");
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		//local variable
		int i;
		
		//local block
		{
			i=300;
		}
		
		System.out.println(i);//300
	}
}

Q) Can we execute java program without main method?

Yes, Till 1.6 version it is possible to execute java program without main method using static block.But from 1.7 version onwards it is not possible to execute java program without main method.

ex:
---
class Test  
{
	static 
	{
		System.out.println("Hello World");
		System.exit(0);
	}
}


Operators 
==========
Operator is a symbol which is used to perform some operations on operands.

ex:
	c = a + b;

	Here a,b and c are operands.
	Here = and + are operators.

It can be arithmetic operation, logical operation, bitwise operation and etc.

We have following list of operators in java.

1) Assignment operators 

2) Conditional/Ternary operators 

3) Logical operators 

4) Bitwise operators

5) Arithmetic operators 

6) Relational operators 

7) Shift operators 

8) Unary operators 

1) Assignment operators
----------------------
class Test  
{
	public static void main(String[] args)
	{
		int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); //30
	}
}
Note:
-----
	Reinitialization is possible in java.


ex:
---
class Test  
{
	public static void main(String[] args)
	{
		final int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); //C.T.E 
	}
}

ex:
---
class Test  
{
	//global variable
	static int i=10;
	
	public static void main(String[] args)
	{
		//local variable 
		int i=20;
		
		System.out.println(i); //20
	}
}
Note:
-----
	Here priority goes to local variable.

ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i;
		
		i=1,2,3,4,5;
		
		System.out.println(i); // C.T.E 
	}
}

ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i+=5; // i = i + 5 
		
		System.out.println(i); //15
	}
}


ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i-=15; // i = i - 15 
		
		System.out.println(i); //-5
	}
}


ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i*=2; // i = i * 2 
		
		System.out.println(i); //20
	}
}

ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i/=5; // i = i / 5;
		
		System.out.println(i); //2
	}
}

ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i/=15; // i = i / 15;
		
		System.out.println(i); //0
	}
}

ex:
--
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i%=15; // i = i % 15;
		
		System.out.println(i); //10
	}
}

ex:
---
class Test  
{
	
	public static void main(String[] args)
	{
		int i=10;
		
		i%=5; // i = i % 5;
		
		System.out.println(i); //0
	}
}






































































































	


















