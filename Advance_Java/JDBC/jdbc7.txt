ResultSetMetaData
==================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns, name of columns, type of columns, size of columns and etc.

We can create ResultSetMetaData object by using getMetaData() method of ResultSet object.
ex:
	ResultSetMetaData rsmd=rs.getMetaData();

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		ResultSetMetaData rsmd=rs.getMetaData();
		
		System.out.println(rsmd.getColumnCount());
		System.out.println(rsmd.getColumnName(1));
		System.out.println(rsmd.getColumnTypeName(2));
		System.out.println(rsmd.getColumnDisplaySize(2));
		rs.close();
		st.close();
		con.close();
	}
}

Thin-Client/Fat-Server application
==================================
Every JDBC application consider is a thin-client/fat-server application.

Diagram: jdbc7.1

To develop thin-client/fat-server application we need to save persistence logic and business logic in the database software in the form of PL/SQL procedures and functions.

To deal with PL/SQL procedures and functions we will use CallableStatement object.


PL/SQL Procedure
----------------
create or replace procedure first_proc(A IN number,B IN number, C OUT number)
is
begin
C:=A+B;
END;
/

ex:
---
package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallebleStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//create a Callable stmt object
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register out parameter
		cst.registerOutParameter(3,Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 30);
		cst.setInt(2, 20);
		
		//execute 
		cst.execute();
		
		//gather the result
		int result=cst.getInt(3);
		
		System.out.println("sum of two numbers is ="+result);

		cst.close();
		con.close();
	}
}


Working with properties file
=============================
In regular intervals our DBA will change username and password for security reason.

It is never recommanded to pass database properties directly to the application.

It is always recommanded to read database properties from properties file.

A properties file contains key and value pair.

dbdetails.properties
--------------------
driver= oracle.jdbc.driver.OracleDriver
url= jdbc:oracle:thin:@localhost:1521:XE
username= system
password= admin

PropertiesFileApp.java
---------------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp 
{
	public static void main(String[] args)throws Exception 
	{
		 //file and locate properties file
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create a Properties class object
		Properties p=new Properties();
		
		//load the data from properties file to properties class.
		p.load(fis);
		
		//gather the data from properties class.
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

JDBC Flexible Application
==========================
In JDBC Connection object is a heavy weight object. 

It is never recommanded to create Connection object in every jdbc application.

We need to create a singleton class which returns Connection object.

ex:

DBConnection.java 
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	private DBConnection()
	{
		
	}
	
	public static Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			
			if(con==null)
			{
				con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			}
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}



FlexibleApp.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

Standard Procedure To Write JDBC Application
=============================================

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class StandardApp 
{
	public static void main(String[] args) 
	{
		final String DRIVER="oracle.jdbc.driver.OracleDriver";
		final String URL="jdbc:oracle:thin:@localhost:1521:XE";
		final String USERNAME="system";
		final String PASSWORD="admin";
		final String QUERY="select * from student";
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

Assignment
==========
Q) Write a jdbc application to create a student table using standard procedure?
























