Batch Processing
=================
Batch processing used to execute multiple queries in a database.

Batch process is a JDBC method to declare multiple queries in a batch to make a single call to the database. 

To add each query to batch we need to use addBatch() method of Statement object.
ex:
	st.addBatch(query);

To execute the batch we need to executeBatch() method of Statement object.
ex:
	int[] arr=st.executeBatch();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessingApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		//declare the queries 
		String  qry1="insert into student values(104,'ramulu','pune')";
		String  qry2="update student set sname='rani' where sname='raja'";
		String  qry3="delete from student where sno=103";
		
		//Add the queries to batch 
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] arr=st.executeBatch();
		
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println("Number of Records effected are :"+sum);
		
		st.close();
		con.close();
	}
}

Transaction Management
======================
Transaction represents a single unit of work. 

If transaction done successfully then we will commit.

If transaction failed then we will rollback.

Diagram: jdbc8.1


sbi table
=========
drop table sbi;

create table sbi(accno number(6),accholder varchar2(10),accbal number(10));

insert into sbi values(111111,'jaydeep',90000);

insert into sbi values(222222,'arun',80000);

commit;


kotak table
============
drop table kotak;

create table kotak(accno number(6),acchold varchar2(10),accbal number(10));

insert into kotak values(100001,'ajay',5000);

insert into kotak values(200002,'prasad',6000);

commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.util.Scanner;

public class TXNManagementApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the source account number : ");
		int sno=sc.nextInt();
		
		System.out.println("Enter the destination account number :");
		int dno=sc.nextInt();
		
		System.out.println("Enter the amount to transfer :");
		int amt=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		//set auto commit false
		con.setAutoCommit(false);
		
		Statement st=con.createStatement();
		
		//Declare the queries
		String qry1="update sbi set accbal=accbal-"+amt+" where accno="+sno;
		String qry2="update kotak set accbal=accbal+"+amt+" where accno="+dno;
		
		//add each query to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		
		//execute the batch
		int[] arr=st.executeBatch();
		
		boolean flag=true;
		for(int i:arr)
		{
			if(i==0)
			{
				flag=false;
				break;
			}
		}
		
		if(flag==true)
		{
			System.out.println("Transaction done Successfully");
			con.commit();
		}
		else
		{
			System.out.println("Transaction Failed");
			con.rollback();
		}
		
		st.close();
		con.close();
		
	}
}

Types of ResultSet object
=========================
We have two types of ResultSet objects.

1) Non-Scrollable ResultSet object 

2) Scrollable ResultSet object 

Diagram: jdbc8.2

1) Non-Scrollable ResultSet object
-----------------------------------
If a ResultSet object allows us to read the records sequentially, uni-directionally is called non-scrollable ResultSet object.

By default every ResultSet object is a non-scrollable ResultSet object.

If Statement object is created without TYPE,MODE value then such ResultSet object is called non-scrollable ResultSet object.
ex:
	Statement st=con.createStatment();
	ResultSet rs=st.executeQuery("select * from student");


 
2) Scrollable ResultSet object 
-------------------------------
If a ResultSet object allows us to read the records non-sequentially, bi-directionally , randomly is called scrollable ResultSet object.


If Statement object is created with TYPE,MODE value then such ResultSet object is called non-scrollable ResultSet object.
ex:
	Statement st=con.createStatment(TYPE,MODE);
	ResultSet rs=st.executeQuery("select * from student");


JDBC provides two TYPE values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL_INSENSITIVE 

JDBC provides two MODE values.
ex:
	ResultSet.CONCUR_READ_ONLY
	ResultSet.CONCUR_UPDATABLE 
	

Various methods present in Scrollable ResultSet object
-------------------------------------------------------
rs.next()
----------
	It is used to move the record pointer to next position.

rs.previous()
------------
	It is used to move the record pointer to previous position.

rs.getXxx()
-----------
	It is used to read the values from record ResultSet.

rs.getRow()
----------
	It returns position of record pointer.

rs.close()
---------
	It is used to close ResultSet object.

rs.first()
----------
	It sets the record pointer to first record.

rs.isFirst()
------------
	It is used to check record pointer is in first position or not.

rs.last();
----------
	It sets the record pointer to last record.

rs.isLast()
-----------
	It is used to check record pointer is in last position or not.

rs.beforeFirst()
----------------
	It sets the record pointer to BFR position.

rs.afterLast()
--------------
	It sets the record pointer to ALR position.

rs.relative(+/-)
--------------
	It is used to move record pointer to next position based on current position.

rs.absolute(+/-)
----------------
	It is used to move record pointer to next position based on BFR/ALR position.

ex
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableResultSetApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.afterLast();
		
		//bottom to top 
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());//true 
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());//true
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		//System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.close();
		st.close();
		con.close();
	}
}









































































