Working with Date values
=======================
While dealing with DOB, DOA, DOR, DOD and etc we need to insert and retrieve date values.

It is never recommanded to store date values in the form of string because it won't give proper comparision between two dates.

Every database support different date patterns.
ex:
	oracle -  dd-MMM-yy
	MySQL  -  yyyy-MM-dd 

While dealing with simple Statement object we can't insert date value to query parameter.

To overcome this limitation we need to PreparedStatement object.

To set the date value to query parameter we need to use setDate(-,-) method.

A java.util.Date class is not suitable to perform database operation.

A java.sql.Date class is suitable to perform database operation.

Once JDBC driver gets the date value then it will insert in the pattern which is supported by underlying database software.

Standard procedure to insert date values
----------------------------------------
Diagram: jdbc6.1

1) Enduser gives date values in the form of string.

2) A parse() method of SimpleDateFormat class converts string date to java.util.Date class object.

3) Our application converts java.util.Date class object to java.sql.Date class object.

4) A ps.setDate(-,-) method is used to set the date values to query parameters.

5) Once JDBC driver gets the date value then it will insert into the database in the pattern which is 
   supported by underlying database software.


emp1 table
=========
drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);


ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class DateInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the employee id :");
		int no=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		System.out.println("Enter the DOJ (dd-MM-yyyy) :");
		String sdoj=sc.next();
		
		//convert string date to util date
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date udoj=sdf.parse(sdoj);
		
		//converting util date to sql date 
		long ms=udoj.getTime();
		java.sql.Date sqldoj=new java.sql.Date(ms);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp1 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values 
		ps.setInt(1, no);
		ps.setString(2, name);
		ps.setDate(3, sqldoj);
		
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
			
		ps.close();
		con.close();
	}
}


DateRetrieveApp.java
---------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;

public class DateRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp1";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			int no=rs.getInt(1);
			String name=rs.getString(2);
			java.sql.Date sqldoj=rs.getDate(3);
			
			//convert sql date to util date 
			java.util.Date udoj=(java.util.Date)sqldoj;
			
			//convert util date to string date 
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			String sdoj=sdf.format(udoj);
			
			System.out.println(no+" "+name+" "+sdoj);
		}
		
		rs.close();
		st.close();
		con.close();
		
	}
}

Working with LOB values
=======================
Files are known as LOB's.

We have two types of LOB's.

1) BLOB (Binary Large Object)
---------------------------
	ex:
		Images, audio, video , avi file and etc.

2) CLOB (Character Large Object)
--------------------------------
	ex:
		text file , advanced text file , doc file and etc.


While dealing with simple Statement object we can set LOB value directly to query parameter.

To overcome this limitation we need to use PreparedStatement object.

We can set LOB values to query parameter by using following methods.
ex:
	ps.setBLOB(-,-,-) / ps.setBinaryStream(-,-,-)
	ps.setCLOB(-,-,-) / ps.setCharacterStream(-,-,-)


emp2 table
===========
drop table emp2;

create table emp2 (eid number(3),ename varchar2(10),ephoto BLOB);


PhotoInsertApp.java
-----------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the employee id : ");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name : ");
		String name=sc.next();
		
		//locate a file 
		File f=new File("src/com/ihub/www/rock.jpg");
		FileInputStream fis=new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp2 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values 
		ps.setInt(1, id);
		ps.setString(2, name);
		ps.setBinaryStream(3, fis,(int)f.length());
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
		
	}
}

PhotoRetrieveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();	
		String qry="select * from emp2";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			InputStream is = rs.getBinaryStream(3);
			
			FileOutputStream fos=new FileOutputStream("D:\\navneeth.png");
			
			int byteReads=0;
			byte[] buffer=new byte[250];
			
			while((byteReads=is.read(buffer))!=-1)
			{
				fos.write(buffer,0, byteReads);
			}
			fos.close();
		}
		System.out.println("Please check the location");
		rs.close();
		st.close();
		con.close();
	}
}

DatabaseMetaData
================
DatabaseMetaData is an interface which is present in java.sql package.

DatabaseMetaData provides metadata of a database.

DatabaseMetaData gives information about database product name, database product version, database driver name, database driver version, database username and etc.

We can create DatabaseMetaData object by using getMetaData() method of Connection object.
ex:
	DatabaseMetaData dbmd=con.getMetaData();

ex:
---

package com.ihub.www;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;

public class DBMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		DatabaseMetaData dbmd=con.getMetaData();
		
		System.out.println(dbmd.getDatabaseProductName());
		System.out.println(dbmd.getDatabaseProductVersion());
		
		System.out.println(dbmd.getDriverName());
		System.out.println(dbmd.getDriverVersion());
		
		System.out.println(dbmd.getUserName());
		
		con.close();
	}
}

Interview Question 
--------------------

Q)  Write a java program to display reverse of a given number?

package com.ihub.www;

import java.util.Scanner;

public class Example {

	public static void main(String[] args) 
	{
			Scanner sc=new Scanner(System.in);
				
			System.out.println("Enter the number :");
			int n=sc.nextInt();  //123
			
			
			//convert number to string 
			String str=Integer.toString(n);
			
			StringBuffer sb=new StringBuffer(str);
			
			str= sb.reverse().toString();
			
			//int rev=Integer.parseInt(str);
			
			System.out.println(str);
	}
}



















































































































