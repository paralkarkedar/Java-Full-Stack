
JDBC Application to interact with MySQL Database
=================================================

step1:
------
	Download and Installed MySQL database software.
	ex:
		https://dev.mysql.com/downloads/installer/

step2:
--------
	Connect with mysql by using password.
	ex:
		cmd> mysql   -u  root    -p
  
		     Enter the password : root  


step3:
-------
	create a SCHEMA in MYSQL.
	ex:
		create schema IH_JAVA_039;

step4:
-------
	To check list of databases /schemas present in mysql db.
	ex:
		show databases;

step5:
-------
	Use IH_JAVA_039 scheme/database.	
	ex:
		use   IH_JAVA_039;

step6:
---------
	create a student table and insert the records.
	ex:
	create table student(sno int(3),sname varchar(10),sadd varchar(10));
	insert into student values(101,'raja','hyd');
	insert into student values(102,'raju','delhi');
	insert into student values(103,'ravi','pune');
	commit;
step7:
---------
	create a JDBC Application to select student records.

MySQLApp.java
------------------------
package com.ge.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class MySQLApp {

	public static void main(String[] args) {
		
		final String DRIVER="com.mysql.jdbc.Driver";
		final String URL="jdbc:mysql://localhost:3306/IH_JAVA_036";
		final String USERNAME="root";
		final String PASSWORD="root";
		final String QUERY="select * from student";
		
		
		Connection con=null;
		Statement st=null;
		ResultSet rs=null;
		try
		{
			Class.forName(DRIVER);
			con=DriverManager.getConnection(URL,USERNAME,PASSWORD);
			st=con.createStatement();
			rs=st.executeQuery(QUERY);
			while(rs.next())
			{
				System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
			}
			
			rs.close();
			st.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		

	}

}



	
step8:
--------
	Add "mysql-connector.jar" file in project build path for mysql database.

	right click to project --> built path --> configuration build path --> libraries
	--> add external jars --> select mysql-connector.jar file --> open.


	jar file download : 		

	https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/8.0.31/
	
	

	Note:

	ojdbc14.jar  		--> for oracle 	
	mysql-connector-j.jar 	--> for mysql 


step9:
--------
	Run the jdbc application.




JDBC Application to interact  with MongoDB Database
====================================================

step1:
-----
	Download and install MongoDB Community Server.
	ex:
		https://www.mongodb.com/try/download/community

step2:
-----
	Downoad and install MongoDB Shell.
	ex:
		https://www.mongodb.com/try/download/shell

step3:
------
	Extract Mongodb shell inside "MongoDB" folder.
	ex:
		C:\Program Files\MongoDB

step4:
------
	Copy "bin" directory of mongoshell.
	ex:
		C:\Program Files\MongoDB\mongosh-2.3.0-win32-x64\bin

step5:
-----
	Paste "bin" directory in environmental variables.
	ex:
		right click to This PC --> properties --> Advanced System Settings -->
		Environmental variables -->  System variables --> click to path --> click to edit 
		button --> New --> paste (C:\Program Files\MongoDB\mongosh-2.3.0-win32-x64\bin) -->ok
		--->ok  --->ok.

step6:
-----
	Launch Eclipse IDE by choosing workspace location.

step7:
-----
	Create MongoDBProj inside eclipse IDE.

	ex:
		File --> New --> Java project --> Name : MongoDBProj --> Next --> Finish.

step8:
-----
	Download and add mongodb jar file in project build path.
	ex:
		jar file link : https://repo1.maven.org/maven2/org/mongodb/mongo-java-driver/3.11.2/


	right click to MongoDBProj --> Buildpath --> configure build path --> libraries -->
	click to classpath --> add external jars --> select mongo-java-driver.jar file --> 
	Open --> Apply and close.

step9:
------
	Create a "com.ihub.www" package inside "src" folder.

step10:
------
	Create a InsertApp.java file inside "com.ihub.www" package.

SelectApp.java
--------------
package com.ihub.www;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class InsertApp 
{
	public static void main(String[] args) 
	{
		try(MongoClient mongoClient=MongoClients.create("mongodb://localhost:27017");)
		{
			MongoDatabase mongoDatabase=mongoClient.getDatabase("myDatabase");
			
			MongoCollection<Document> mongoCollection=mongoDatabase.getCollection("myCollection");
			
			Document doc=new Document("id", 101)
							.append("name","Alan")
							.append("add","Hyd");
			
			mongoCollection.insertOne(doc);
			
			System.out.println("Record Inserted in MongoDB");
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}

step11:
-------
	Run the jdbc application.



Q) Write a jdbc application to read the record from mongodb?

package com.ihub.www;

import org.bson.Document;

import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class SelectApp 
{
	public static void main(String[] args) 
	{
		try(MongoClient mongoClient=MongoClients.create("mongodb://localhost:27017");)
		{
			MongoDatabase mongoDatabase=mongoClient.getDatabase("myDatabase");
			
			MongoCollection<Document> mongoCollection=mongoDatabase.getCollection("myCollection");
			
			Document findDocument=mongoCollection.find(new Document("id",101)).first();
			
			System.out.println(findDocument.toJson());
			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
	}
}



MongoDB commands
================
> mongo dbs;

> use myDatabase;

myDatabase > db.dropDatabase();

> show collections;

> db.myCollection.find();

















