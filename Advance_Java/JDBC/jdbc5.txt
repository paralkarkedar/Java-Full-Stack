Q) Types of Connection objects in JDBC?

We have two types of Connection objects in JDBC.

1) Direct JDBC Connection object 

2) Pooled JDBC Connection object 

1) Direct JDBC Connection object
----------------------------------
A JDBC Connection object which is created by the user as per the application requirement is called direct JDBC Connection object.
ex:
	Class.forName("oracle.jdbc.driver.OracleDriver");
	Connection con=
	DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");


2) Pooled JDBC Connection object 
---------------------------------
A JDBC Connection object which is gathered from JDBC Connection pool is called pooled JDBC connection object.

Q) Types of Statements in JDBC?

We have three statements in JDBC.

1) Simple Statement object 
--------------------------
It is an object of underlying supplied java class which implements java.sql.Statement interface.

2) PreparedStatement object 
---------------------------
It is an object of underlying supplied java class which implements java.sql.PreparedStatement interface.

3) CallableStatement object 
--------------------------
It is an object of underlying supplied java class which implements java.sql.CallableStatement interface.


SQL Injection problem
=====================
Along with input values if we pass special SQL instructions which change the behaviour of a query and behaviour of an application is called SQL Injection Problem.

Here special SQL instruction means comment in SQL i.e --.

While dealing with simple Statement object there is a chance of raising SQL injection problem.

ex:
	username : raja'--
	password : hyd

	Valid Credentials 

userlist table
---------------
drop table userlist;

create table userlist(uname varchar2(10),pwd varchar2(10));

insert into userlist values('raja','rani');

insert into userlist values('king','kingdom');

commit;

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class SQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		//convert input values according to SQL query
		name="'"+name+"'";
		pass="'"+pass+"'";
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry="select count(*) from userlist where uname="+name+" and pwd="+pass;
		
		ResultSet rs=st.executeQuery(qry);
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		
		if(result==0)
			System.out.println("Invalid Credentials ");
		else
			System.out.println("Valid Credentials ");
		
		rs.close();
		st.close();
		con.close();
	}
}

Limitations with Simple Statement object
========================================

1) It is not suitable to execute same query for multiple times with same values or different values.

2) It raises SQL injection problem.

3) Framing query with variables is quit complex.

4) We can't place string values directly to query parameter without any conversion.

5) It does not allow us to insert date values to database table column.

6) It does not allow us to insert LOB values to database table column.

To overcome these above limitations we need to use PreparedStatement object.

Pre-compiled SQL Query
======================
Our query goes to database software without inputs and becomes parsed query either it is executed or not is called pre-compiled SQL query.

A PreparedStatement object deals with pre-compiled SQL Query.


Steps to work with PreparedStatement object
============================================
step1:
------
	Create a query with placeholders or parameters.
	ex:
		String qry="insert into student values(?,?,?)";

step2:
------
	Convert SQL query to pre-compiled SQL query.
	ex:
		PreparedStatement ps=con.prepareStatement(qry);

step3:
------
	Set the values to query parameters.
	ex:
		ps.setInt(1,no);
		ps.setString(2,name);
		ps.setString(3,add);

step4:
-----
	Execute the pre-compiled SQL query.
	ex:
		ps.executeUpdate();

step5:
------
	Close PreparedStatement object.
	ex:
		ps.close();


Q) Write a JDBC Application to insert a record into student table?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		System.out.println("Enter the student address :");
		String add=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into student values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		ps.setString(2, name);
		ps.setString(3, add);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
		
	}
}

Q) Write a JDBC application to update student name based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the student no:");
		int no=sc.nextInt();
		
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="update student set sname=? where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1,name);
		ps.setInt(2, no);
		
		//execute
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println("Record Updated");
		
		ps.close();
		con.close();
	}
}


Q) Write a JDBC application to delete student record based on student no?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="delete from student where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1, no);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record Deleted");
		
		ps.close();
		con.close();
	}
}

Q) Write a JDBC application to select student records using PrepareStatement object?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class PSSelectApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		String qry="select * from student";
		PreparedStatement ps=con.prepareStatement(qry);
		
		ResultSet rs=ps.executeQuery();
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		ps.close();
		con.close();
	}
}

Solution for SQL Injection problem
===================================

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class SolForSQLInjProbApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the username :");
		String name=sc.next();
		
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="select count(*) from userlist where uname=? and pwd=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1, name);
		ps.setString(2, pass);
		
		//execute
		ResultSet rs=ps.executeQuery();
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		if(result==0)
			System.out.println("Invalid Credentials");
		else
			System.out.println("Valid Credentials");
				
		rs.close();
		ps.close();
		con.close();

	}
}

Assignment
===========

Q) Write a JDBC application to create a student table?




CREATE TABLE student212(
                id NUMBER(10), 
                first_name VARCHAR2(50), 
                last_name VARCHAR2(50), 
                email VARCHAR2(100), 
                age NUMBER(10)
                );









































































































































































