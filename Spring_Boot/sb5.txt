Microservice
=============
Using spring boot we can create micro services.

To build a microservice we need to use spring boot flow layered architecture.

Diagram:  sb5.1

Project structure
=================

customer-service
|
|---src/main/java
	|
	|---com.ihub.www.
		|
		|---CustomerServiceApplication.java
	|
	|---com.ihub.www.controller
		|
		|---CustomerController.java
	|
	|---com.ihub.www.service
		|
		|---CustomerService.java
	|
	|---com.ihub.www.model
		|
		|---Customer.java
	|
	|------com.ihub.www.repo
		|
		|---CustomerRepository.java (interface)

|
|---src/main/resources
	|
	|---application.yml
|
|---src/test/java
|
|---pom.xml
|

step1:
------
	Create a "demo" schema in mysql database.
	ex:
		create schema demo;
		use demo;


step2:
------
	Launch STS IDE by choosing workspace location.

step3:
-------
	Create a sprint starter project i.e customer-service.
	ex:
		starters :	
				Spring Web 
				Spring Data JPA
				MySQL Driver 
				Lombok 


step4:
------
	Crate a Customer model class inside "com.ihub.www.model" package.

Customer.java
-------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Entity
@Table(name="customers")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Customer 
{
	@Id
	private int custId;
	
	@Column
	private String custName;       
	
	@Column
	private String custAddress;
}


step5:
-----
	Create a CustomerRepository interface inside "com.ihub.www.repo" package.

CustomerRepository.java
---------------------
package com.ihub.www.repo;

import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Customer;

@Repository
public interface CustomerRepository extends CrudRepository<Customer, Integer>
{

}

step6:
------
	Create a CustomerController inside "com.ihub.www.controller" package.

CustomerController.java
-----------------------
package com.ihub.www.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ihub.www.model.Customer;
import com.ihub.www.service.CustomerService;

@RestController
@RequestMapping("/customer")
public class CustomerController 
{
	@Autowired
	CustomerService customerService;
	
	@PostMapping("/add")
	public Customer addCustomer(@RequestBody Customer customer)
	{
		return customerService.addCustomer(customer);
	}
	
	@GetMapping("/fetch")
	public Iterable<Customer> getAllCustomers()
	{
		return customerService.getAllCustomers();
	}
	
	@GetMapping("/fetch/{custId}")
	public Customer getCustomerById(@PathVariable int custId)
	{
		return customerService.getCustomerById(custId);
	}
}

step7:
------
	Creat a CustomerService inside "com.ihub.www.service" package.

CustomerService.java
---------------------
package com.ihub.www.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;

import com.ihub.www.model.Customer;
import com.ihub.www.repo.CustomerRepository;

@Service
public class CustomerService 
{
	@Autowired
	CustomerRepository customerRepository;

	public Customer addCustomer(Customer customer)
	{
		return customerRepository.save(customer);
	}
	
	public Iterable<Customer> getAllCustomers()
	{
		return customerRepository.findAll();
	}
	
	public Customer getCustomerById(int custId)
	{
		return customerRepository.findById(custId).get();
	}
}



step8:
-----
	Convert application.properties file to application.yml file.

step9:
-----
	Configure server port , mysql database properties and hibernate properties inside
	application.yml file.

application.yml
--------------
server:
  port: 9191

spring:
  application:
    name: CUSTOMER-SERVICE

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/demo
    username: root
    password: root
  jpa:
    hibernate.ddl-auto: update
    generate-ddl: true
    show-sql: true

step10:
------
	Run customer service

step11:
-------
	Download and install postman.
	ex:
		https://www.postman.com/downloads/


step12:
-----
	Open the postman and check the given request urls.

	ex:

		HTTP Method			Request url
		-------------			------------
		POST				http://localhost:9191/customer/add
						Body		
							Raw  (JSON)

						{
    							"custId":101,
    							"custName":"Alan",
    							"custAddress":"Florida"
						}
								

		GET				http://localhost:9191/customer/fetch

		GET				http://localhost:9191/customer/fetch/101

 

































