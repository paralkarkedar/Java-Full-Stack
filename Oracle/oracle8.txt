Sequence
========
Sequence is an object which is used to generate the numbers.

syntax:
------
	create sequence <sequence_name> start with value increment by value;

ex:
	create sequence sq1 start with 1 increment by 1;

	create sequence sq2 start with 101 increment by 1;

	create sequence sq3 start with 10 increment by 10;

A sequence having two pseudo's.

1) NEXTVAL
--------
	It is used to generate next number in a sequence.

	ex:
		drop table student;

		create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

		create sequence sq1 start with 101 increment by 1;

		insert into student values(sq1.NEXTVAL,'raja','hyd');
		insert into student values(sq1.NEXTVAL,'ravi','delhi');
		insert into student values(sq1.NEXTVAL,'ramana','vizag');
		commit;		

		select * from student;

2) CURRVAL 
----------
	It will return the last number generated by the sequence.
	ex:
		select  sq1.CURRVAL from dual;	


Q) Write a query to display list of sequences present in database?

	select sequence_name from user_sequences;


Q) Write a query to drop the sequence?

	drop sequence sq1;


Joins
======
Joins is used to retrieve the data from one or more then one table.

ex:
	select * from emp,dept; // 6*4 = 24 records 

	select eid,ename,esal,deptno,dname,dloc from emp,dept;  --column ambiguously defined

	To overcome above limitation we need to use table.column name.
	
	ex:
	
	select emp.eid,emp.ename,emp.esal,dept.deptno,dept.dname,dept.dloc from emp , dept; --6*4=24 records

Table alias
----------
A userdefined name given to a table is called table alias.

Using table alias length of the query will reduce mean while performance is maintained.

Table alias is temperory.Once the query is executed we will loss the table alias.

ex:
	select e.eid,e.ename,e.esal,d.deptno,d.dname,d.dloc from emp e, dept d; -- 6*4 = 24 records


We have following list of joins.

1) Equi Join 

2) Non-Equi Join 

3) Self Join 

4) Cartisian Product 

5) Inner Join

6) Outer Join 

1) Equi Join 
--------------
When two tables are joined based on common column is called equi join.

It uses the equality operator (=) to match records.

ex:
---
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d
	where (e.deptno=d.deptno);  -- 6 records display



2) Non-Equi Join
----------------
When table tables joined without any equi join condition is called non-equi join.

Non-equi joins are often used in scenarios where you want to join tables based on ranges of values rather than exact matches.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d
	where e.esal between 30000 AND 50000;  -- 2*4 = 8 records 

	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d
	where e.esal>30000 AND e.esal<50000; 



3) Self Join 
-------------
A table join to itself is called self join.

In self join we need to create two table alias for same table.

ex:
	select e1.eid,e1.ename,e1.esal,e2.job,e2.comm from emp e1,emp e2
	where (e1.deptno=e2.deptno);	-- 6 + 6 = 12 records  


4) Cartisian Product 
--------------------
If two tables are join without any condition is called cartisian product.

It returns all possible combinations.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d; --  6 * 4 = 24 records



5) Inner Join
-------------
It is similar to equi join.

It is given by ANSI people.

ANSI stands for American National Standard Institute.

ex:

	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e INNER JOIN dept d
	ON (e.deptno=d.deptno);  -- 6 records 


	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e JOIN dept d
	ON (e.deptno=d.deptno);  -- 6 records 


6) Outer Join 
-------------
It is a extension of equi join.

A '+' is a outer join operator.

It returns matching as well as not matching records.

We have following list of outer joins.

i) left outer join 
-----------------
	SQL
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e,dept d
		where(e.deptno=d.deptno(+));

	ANSI 
	-----			
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e LEFT OUTER JOIN dept d
		ON(e.deptno=d.deptno);


ii) right outer join 
-------------------
	SQL
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e,dept d
		where(e.deptno(+)=d.deptno);

	ANSI 
	-----			
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e RIGHT OUTER JOIN dept d
		ON(e.deptno=d.deptno);


iii) full outer join 
--------------------
	ANSI 
	-----			
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e FULL OUTER JOIN dept d
		ON(e.deptno=d.deptno);






















































	


















