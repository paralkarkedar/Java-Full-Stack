
iii) Date functions
--------------------
We have following list of date functions.

ADD_MONTHS()
-------------
	It is used to add the months in a given date.
	ex:
		select ADD_MONTHS('07-OCT-24',4) from dual;

MONTHS_BETWEEN()
--------------
	It returns number of months between two dates.
	ex:
		select MONTHS_BETWEEN('01-JAN-24','07-OCT-24') from dual;
		select MONTHS_BETWEEN('01-JAN-24','01-NOV-24') from dual;
		select ABS(MONTHS_BETWEEN('01-JAN-24','01-NOV-24')) from dual;

NEXT_DAY()
--------
	It will return next date of a given day in a week.
	ex:
		select NEXT_DAY(sysdate,'sunday') from dual;
		select NEXT_DAY(sysdate,'monday') from dual;

LAST_DAY()
------------
	It will return last date of a month.
	ex:
		select LAST_DAY('13-FEB-24') from dual;

		select LAST_DAY(sysdate) from dual;


iv) convertion functions
--------------------------
convertion function is used to convert from one datatype to another datatype.

ex:
	TO_CHAR() function 

We have two pseduo's for TO_CHAR


1) number TO_CHAR 
----------------
	It takes '9' in digits and dollar or euro's symbol.
	ex:
		select eid,ename,esal from emp;

		select eid,ename,TO_CHAR(esal,'9,999') from emp;

		select eid,ename,TO_CHAR(esal,'99,999') from emp;

		select eid,ename,TO_CHAR(esal,'$99,999') from emp;

		select eid,ename,TO_CHAR(esal,'$99,999') as ESAL  from emp;


2) date  TO_CHAR  
---------------
		select TO_CHAR(sysdate,'dd-MM-yyyy') from dual;

		select TO_CHAR(sysdate,'yyyy-MM-dd') from dual;

		select TO_CHAR(sysdate,'HH:MI:SS') from dual;

		select TO_CHAR(sysdate,'dd-MM-yyyy  HH:MI:SS') from dual;

		select TO_CHAR(sysdate,'year') from dual;

		select TO_CHAR(sysdate,'month') from dual;

		select TO_CHAR(sysdate,'day') from dual;





Integrity Constraints
=====================
Constraints are the rules which are applied on the tables to achieve accuracy and quality of data.

We have five types of contraints.

1) NOT NULL 

2) UNIQUE 

3) PRIMARY KEY 

4) FOREIGN KEY 

5) CHECK 

Constraints can be created at two levels.

i) column level 

ii) table level 


1) NOT NULL 
------------
NOT NULL constraint does not accept null values.

NOT NULL constraint can accept duplicate values.

NOT NULL constraint can be created only at column level.


column level
-------------
drop table student;

create table student(sno number(3) NOT NULL,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(101,'ravi','delhi');

Note:
-----
NOT NULL constraint can be created for multiple columns.

ex:
---
drop table student;

create table student(sno number(3) NOT NULL,
				sname varchar2(10) NOT NULL,
					sadd varchar2(12) NOT NULL);

insert into student values(null,'raja','hyd'); //invalid 

insert into student values(102,null,'delhi'); //invalid 

insert into student values(103,'ravi',null); //invalid 

insert into student values(104,'ramana','pune'); // valid	


2) UNIQUE 
----------
UNQIUE constraint does not accept duplicates.

UNIQUE constraint can accept null values.

UNIQUE constraint can be created at column level and table level.


column level
------------
drop table student;

create table student(sno number(3) UNIQUE,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi');

insert into student values(101,'ravi','delhi'); //invalid 



table level
------------
drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12), UNIQUE(sno));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi');

insert into student values(101,'ravi','delhi'); //invalid 


Note:
-----
UNIQUE constraint can be applied to multiple columns.

ex:
---
drop table student;

create table student(sno number(3) UNIQUE,sname varchar2(10) UNIQUE,sadd varchar2(12) UNIQUE);

insert into student values(101,'raja','hyd');

insert into student values(101,'ravi','delhi'); //invalid 

insert into student values(102,'raja','delhi'); //invalid 

insert into student values(103,'ramana','hyd'); //invalid 




3) PRIMARY KEY 
-------------------
Primary key is a combination of NOT NULL and UNIQUE constraint.

Primary key does not accept null values and duplicate values.

A table can have only one primary key.

Primary key constraint can be created at column level and table level.


column level
-----------
drop table student;

create table student(sno number(3) primary key,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(101,'ravi','delhi'); //invalid 


table level
------------

drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12), primary key(sno));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(101,'ravi','delhi'); //invalid 




4) FOREIGN KEY 
----------------
Foreign key is used to establish the relationship between two tables.

This relationship is called parent and child relationship or master and details relationship.

To establish the relatinship between two tables a parent table must primary key or unique constraint and 
child table must have foreign key.

Foreign key will accept only those values which are present in primary key.

Foreign key name may or may not match with primary key but datatype must match.

Foreign key will accept duplicates and null values.

Diagram: oracle5.1


college table
--------------
drop table college;

create table college(sno number(3) PRIMARY KEY,sname varchar2(10),sadd varchar2(12));

insert into college values(101,'raja','hyd');

insert into college values(102,'ravi','delhi');

insert into college values(103,'ramana','vizag');

commit;


library table
-------------
drop table library;

create table library(roll_no  number(3) REFERENCES college(sno), book_name varchar2(10));

insert into library values(101,'java');

insert into library values(102,'oracle');

insert into library values(103,'html');

insert into library values(103,'CSS');

insert into library values(null,'Spring');

insert into library values(104,'hibernate'); //invalid 


In order to drop the table, first we need to drop library table then college table.

ex:
	drop table library;
	drop table college; 

5) CHECK 
---------
CHECK constraint describes domain of column.

Here domain means what type of value a column must accept.

Check contraint can be created at column level and table level.

column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10),smarks number(3) check(smarks<=100));

insert into student values(101,'raja',78);

insert into student values(102,'ravi',100);

insert into student values(103,'ramana',289);

commit;


column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10),smarks number(3) check(smarks between 0 and 100));

insert into student values(101,'raja',78);

insert into student values(102,'ravi',100);

insert into student values(103,'ramana',289); //invalid 

commit;


column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10) check (sname=lower(sname)),
					smarks number(3));

insert into student values(101,'raja',78);

insert into student values(102,'RAVI',100); //invalid 

insert into student values(103,'RaMaNa',289); //invalid 

commit;



column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10) check (sname=upper(sname)),
					smarks number(3));

insert into student values(101,'raja',78); //invalid

insert into student values(102,'RAVI',100);

insert into student values(103,'RaMaNa',289); //invalid 

commit;


column level
------------
drop table student;

create table student(sno number(3),sname varchar2(10),smarks number(3),
								check (sname=upper(sname)));

insert into student values(101,'raja',78); //invalid

insert into student values(102,'RAVI',100);

insert into student values(103,'RaMaNa',289); //invalid 

commit;























